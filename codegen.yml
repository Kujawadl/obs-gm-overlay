overwrite: true
schema:
  - "./graphql/types/index.ts":
      loader: "./schema-loader.js"
generates:
  ./graphql/client-types.tsx:
    documents:
      - "./graphql/**/*.gql":
          loader: "./document-loader.js"
    plugins:
      - "add":
          content: |-
            /**
             * GENERATED FILE: DO NOT MODIFY DIRECTLY
             * `npm run generate-types` to update
             */
            /* eslint-disable */
      - "typescript"
      - "typescript-operations"
      - "typescript-react-apollo"
  ./graphql/server-types.ts:
    plugins:
      - "add":
          content: |-
            /**
             * GENERATED FILE: DO NOT MODIFY DIRECTLY
             * `npm run generate-types` to update
             */
            /* eslint-disable */
      - "typescript"
      - "typescript-resolvers"
    config:
      contextType: "./context#Context"
      mappers:
        Player: "@graphql/models#Player as PlayerModel"
        PlayerMutation: "@graphql/models#Player as PlayerModel"
        Campaign: "@graphql/models#Campaign as CampaignModel"
        CampaignMutation: "@graphql/models#Campaign as CampaignModel"
        Combatant: "@graphql/models#Combatant as CombatantModel"
        CombatantMutation: "@graphql/models#Combatant as CombatantModel"
        Encounter: "@graphql/models#Encounter as EncounterModel"
        EncounterMutation: "@graphql/models#Encounter as EncounterModel"
      resolverTypeWrapperSignature: Promise<T> | T | Promise<undefined> | undefined
      maybeValue: T | undefined
      inputMaybeValue: T | undefined | null
  ./graphql/introspection.json:
    plugins:
      - "introspection"
config:
  namingConvention:
    typeNames: "change-case-all#pascalCase"
    transformUnderscore: true
